- var path = '../../'
- var title = 'i18next-node - initialization'
!!! 5
html(lang="en")
  head
    include ../includes/layout/head

    title i18next Documentation: Initialization

  body
    include ../includes/layout/header
          
    include ../includes/layout/content
      .documentation
        include ../includes/doc_hero

        //- ************************************************
        //- * INITIALISATION
        //- * 
        h2 Initialization

        pre
          code
            | var i18n = require("i18next");
            | i18n.init();
        pre
          code
            | // with options
            | i18n.init({ lng: "en-US" });
            | // "later"
            | var x = i18n.t("key");
            | 
            | // with callback
            | i18n.init(function(t) { 
            |   var x = t("key");
            | });
            | 
            | // with both
            | i18n.init({ lng: "en-US" }, function(t) { 
            |   var x = t("key");
            | });

        //- ************************************************
        //- * Options
        //- * 
        h3 Basic Options

        .row-fluid
          .span4
            h4.feature-title Set language on init:

          .span8
            .feature
              pre
                code
                  | i18n.init({ lng: 'en-US' });
              .alert.alert-info.feature-description
                a(name='lookupvalue')
                p Resources will be resolved in this order:
                  ol
                    li 1) try languageCode plus countryCode, eg. 'en-US'
                    li 2) alternative look it up in languageCode only, eg. 'en'
                    li 3) finally look it up in definded fallback language, default: 'dev'

              .alert.alert-info.feature-description
                p 
                  h5.alert-heading Change language programatically:
                  | Call function i18n.setLng(lng, callback).
                  h5.alert-heading Read out current language:
                  | Call function i18n.lng() returns current lng.

        .row-fluid
          .span4
            a(name='detectlng')
            h4.feature-title language detection:

          .span8
            .feature
              
              .alert.alert-info.feature-description
                p If language is not set explicitly i18next tries to detect the user language by:
                  ol
                    li 1) querystring parameter (?setLng=en-US)
                    li 2) cookie (i18next)
                    li 3) request header

              .alert.alert-info.feature-description
                p Alternatively you can init i18next to set language from requested route:

                pre
                  code
                    | i18n.init({ detectLngFromPath: 0 }); // default false

                p Just set the value to the index where the language value is, eg.:
                  ol
                    li detectLngFromPath = 0 --> /en-US/myPage
                    li detectLngFromPath = 1 --> /cms/en-US/anotherPage


        .row-fluid
          .span4
            h4.feature-title preload additional languages on init:

          .span8
            .feature
              pre
                code
                  | i18n.init({ preload: ['de-DE', 'fr'] });
              .alert.alert-info.feature-description
                p The additional languages will be preloaded.

              .alert.alert-info.feature-description
                p 
                  h5.alert-heading Preload after init:
                  | Call function i18n.preload([lngs], callback).

        .row-fluid
          .span4
            h4.feature-title Unset/Set fallback language:

          .span8
            .feature
              h6 setting fallback language:
              pre
                code
                  | i18n.init({ fallbackLng: 'en' });
              .alert.alert-info.feature-description
                p 
                  | If not set it will default to 'dev'. If turned on, all missing key/values will be 
                  | sent to this language.
                p 
                  span.badge.badge-info Production Hint:
                  |  set fallback language to some meaningful language, eg. 'en'

              h6 turn fallback language feature off:
              pre
                code
                  | i18n.init({ fallbackLng: false });
              .alert.alert-info.feature-description
                p 
                  | As the fallbackLng will default to 'dev' you can turn it off by setting the option value to false.
                  | This will prevent loading the fallbacks resource file and any futher look up of missing value inside a fallback file.

        .row-fluid
          .span4
            a(name='loadbehaviour')
            h4.feature-title Specify which locales to load:
            p 
              | This will help you optimizing the loading behaviour. In combination with setting 
              | fallbackLng to false you can reduce the requests to the server to one! 

          .span8
            .feature
              h6 only load current resource file:
              pre
                code
                  | i18n.init({ load: 'current' });
              .alert.alert-info.feature-description
                p 
                  | If load option is set to current i18next will load the current set language 
                  | (this could be a specific (en-US) or unspecific (en) resource file).
                p 
                  span.badge.badge-info Hint:
                  |  to prevent loading the fallbackLng's resource file set fallbackLng to false.

              h6 only load unspecific resource file:
              pre
                code
                  | i18n.init({ load: 'unspecific' });
              .alert.alert-info.feature-description
                p 
                  | If set to unspecific i18next will always load the unspecific resource file 
                  | (eg. en instead of en-US).
                p 
                  span.badge.badge-info Hint:
                  |  to prevent loading the fallbackLng's resource file set fallbackLng to false.

        .row-fluid
          .span4
            h4.feature-title Debug output:

          .span8
            .feature
              pre
                code
                  | i18n.init({ debug: true });
              .alert.alert-info.feature-description
                p If something went wrong you might find some helpful information on console log.

        //- ************************************************
        //- * Resource Loading
        //- * 
        a(name='getresources')
        h2 Resource Loading

        h3 init callback when loaded

        .row-fluid
          .span4
            pre
              code
                | i18n.init(callback);

          .span8
            .feature
              pre
                code
                  | i18n.init(function(t) { 
                  |   var appName = t("key");
                  | });
              .alert.alert-info.feature-description
                p 
                  | after callback is called you can use the translation function
                  strong  't' 
                  | to access your resources in given language.

        a(name='getresources')
        h3 options to load resources

        .row-fluid
          .span4
            h4.feature-title Pass in resource store:

          .span8
            .feature
              pre
                code
                  | // tree: lng -> namespace -> key -> nested key
                  | var resources = {
                  |   dev: { translation: { 'key': 'value' } },
                  |   en: { translation: { 'key': 'value' } },            
                  |   'en-US': { translation: { 'key': 'value' } }
                  | };
                  | 
                  | i18n.init({ resStore: resources });

              .alert.alert-info.feature-description
                p As you provide the resources the callbacks will fire immediatly and no external resources will be loaded!

        .row-fluid
          .span4
            h4.feature-title Set filepath to load resources from:

          .span8
            .feature
              pre
                code
                  | var option = { resGetPath: 'locales/__lng__/__ns__.json' };
                  | 
                  | i18n.init(option);

              .alert.alert-info.feature-description
                p Will load 'locales/en-US/translation.json'.
                p 
                  | If language is set to
                  strong  'en-US' 
                  | following resource files will be loaded one-by-one:
                  ul
                    li en-US
                    li en
                    li dev (default fallback language)
                p 
                  span.badge.badge-info Hint:
                  |  to lowercase countryCode in requests, eg. to 'en-us' 
                  | set option 
                  strong lowerCaseLng = true

              pre
                code
                  | var option = { resGetPath: 'locales/__ns__-__lng__.json' };
                  | 
                  | i18n.init(option);

              .alert.alert-info.feature-description
                p Will load 'locales/translation-en-US.json'.

        .row-fluid
          .span4
            h4.feature-title Change namespace (one):

          .span8
            .feature
              pre
                code
                  | var option = { ns: 'resource' };
                  | 
                  | i18n.init(option);

              .alert.alert-info.feature-description
                p 
                  | Will load:
                  ol
                    li 'locales/en-US/resource.json'
                    li 'locales/en/resource.json'
                    li 'locales/dev/resource.json'

                p (Default namespace is 'translation'.)

        .row-fluid
          .span4
            h4.feature-title Multiple namespace:

          .span8
            .feature
              pre
                code
                  | var option = { 
                  |   ns: { 
                  |     namespaces: ['app', 'buttons'], 
                  |     defaultNs: 'app'
                  |   } 
                  | };
                  | 
                  | i18n.init(option, function(t) {
                  |   // access default namespace
                  |   var x = t("any.key.from.app")
                  | 
                  |   // to access another namespace prepend [ns]:
                  |   var y = t("buttons:any.key.from.buttons") 
                  | });

              .alert.alert-info.feature-description
                p 
                  | Will load:
                  ol
                    li 'locales/en-US/app.json'
                    li 'locales/en/app.json'
                    li 'locales/dev/app.json'
                    li 'locales/en-US/buttons.json'
                    li 'locales/en/buttons.json'
                    li 'locales/dev/buttons.json' 
        
        a(name='backend')
        h3 Change Backend Implementation

        .row-fluid
          .span4
            h4.feature-title Change out backend:
            p default is filesystem

            p Options are:
            ul
              li mongoDb
              li redis
              li couchDb
              li gettext

          .span8
            .feature
              h4 mongoDb:
              pre
                code
                  | npm install i18next.mongoDb
                  | 
                  | var i18nextMongoSync = require('i18next.mongoDb')
                  | 
                  | i18nMongoSync.connect({
                  |     host: "localhost",
                  |     port: 27017,
                  |     dbName: "i18next"
                  |     // resCollectionName: "resources"
                  | }, function() {
                  |     i18n.backend(i18nMongoSync);
                  |     i18n.init();
                  | });

              h4 redis:
              pre
                code
                  | npm install i18next.redis
                  | 
                  | var i18nextRedisSync = require('i18next.redis')
                  | 
                  | i18nMongoSync.connect({
                  |     host: "localhost",
                  |     port: 27017,
                  |     database: 0
                  |     // resCollectionName: "resources"
                  | }, function() {
                  |     i18n.backend(i18nRedisSync);
                  |     i18n.init();
                  | });

              h4 couchDb:
              pre
                code
                  | npm install i18next.couchdb
                  | 
                  | var i18nextCouchSync = require('i18next.couchdb')
                  | 
                  | i18nextCouchSync.connect({
                  |     host: "http://localhost",
                  |     port: 5984,
                  |     dbName: "i18next"
                  |     // resCollectionName: "resources"
                  | }, function() {
                  |     i18n.backend(i18nextCouchSync);
                  |     i18n.init();
                  | });

              h4 additional backend functions
              pre
                code
                  | // loading loadResourceSet(lng, ns, cb)
                  | backend.fetchOne("en-US," "myNamespace", function(err, resourceSet) { ... }); 
                  | 
                  | // saving saveResourceSet(lng, ns, resouceSet, cb)
                  | var myResourceSet = {...};
                  | backend.saveResourceSet("en-US", "myNamespace", myResourceSet, function(err) {
                  |     // handle err
                  | });

              .alert.alert-info.feature-description
                p 
                  | The additional database backends where provided thanks to 
                  a(href='https://github.com/adrai') adrai.

        .row-fluid
          .span4
            a(name='gettext')
            h4.feature-title gettext backend:
            p load gettext files (.mo/.po) from filesystem.

          .span8
            .feature
              pre
                code
                  | npm install i18next.gettext
                  | 
                  | var gettextSync = require('i18next.gettext')
                  | 
                  | i18n.backend(gettextSync);
                  | i18n.init({ resSetPath: 'locales/__lng__/__ns__.mo' }); // or .po

              .alert.alert-info.feature-description
                p: gettext-sync only supports loading resources! Saving of missing resources is not yet supported.

    include ../includes/layout/extra
      
    include ../includes/layout/footer
    
    include ../includes/layout/endscripts